package io.quarkiverse.langchain4j.docling.client;

import java.io.File;
import java.math.BigDecimal;
import java.util.List;

import io.quarkiverse.langchain4j.docling.client.model.ConversionRequest;
import io.quarkiverse.langchain4j.docling.client.model.ConvertDocumentResponse;
import io.quarkiverse.langchain4j.docling.client.model.HealthCheckResponse;
import io.quarkiverse.langchain4j.docling.client.model.ImageRefMode;
import io.quarkiverse.langchain4j.docling.client.model.InputFormat;
import io.quarkiverse.langchain4j.docling.client.model.OcrEnginesEnum;
import io.quarkiverse.langchain4j.docling.client.model.OutputFormat;
import io.quarkiverse.langchain4j.docling.client.model.PdfBackend;
import io.quarkiverse.langchain4j.docling.client.model.TableFormerMode;
import io.quarkiverse.langchain4j.docling.client.model.TaskStatusResponse;

/**
 * Docling Serve
 * <p>
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * </p>
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJAXRSSpecServerCodegen")
@jakarta.ws.rs.Path("")
public interface DoclingRestApi {

    /**
     * Health
     *
     */
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Path("/health")
    @jakarta.ws.rs.Produces({ "application/json" })
    HealthCheckResponse healthHealthGet();

    /**
     * Process File
     *
     */
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Path("/v1alpha/convert/file")
    @jakarta.ws.rs.Consumes({ "multipart/form-data" })
    @jakarta.ws.rs.Produces({ "application/json", "application/zip" })
    ConvertDocumentResponse processFileV1alphaConvertFilePost(
            @jakarta.ws.rs.BeanParam ProcessFileV1alphaConvertFilePostMultipartForm multipartForm

    );

    class ProcessFileV1alphaConvertFilePostMultipartForm {
        @jakarta.ws.rs.FormParam("files")
        @org.jboss.resteasy.reactive.PartFilename("filesFile")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_OCTET_STREAM)
        public List<File> files;
        @jakarta.ws.rs.FormParam("from_formats")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public List<InputFormat> fromFormats;
        @jakarta.ws.rs.FormParam("to_formats")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public List<OutputFormat> toFormats;
        @jakarta.ws.rs.FormParam("image_export_mode")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public ImageRefMode imageExportMode;
        @jakarta.ws.rs.FormParam("do_ocr")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doOcr;
        @jakarta.ws.rs.FormParam("force_ocr")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean forceOcr;
        @jakarta.ws.rs.FormParam("ocr_engine")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public OcrEnginesEnum ocrEngine;
        @jakarta.ws.rs.FormParam("ocr_lang")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public List<String> ocrLang;
        @jakarta.ws.rs.FormParam("pdf_backend")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public PdfBackend pdfBackend;
        @jakarta.ws.rs.FormParam("table_mode")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.APPLICATION_JSON)
        public TableFormerMode tableMode;
        @jakarta.ws.rs.FormParam("abort_on_error")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean abortOnError;
        @jakarta.ws.rs.FormParam("return_as_file")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean returnAsFile;
        @jakarta.ws.rs.FormParam("do_table_structure")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doTableStructure;
        @jakarta.ws.rs.FormParam("include_images")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean includeImages;
        @jakarta.ws.rs.FormParam("images_scale")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public BigDecimal imagesScale;
        @jakarta.ws.rs.FormParam("do_code_enrichment")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doCodeEnrichment;
        @jakarta.ws.rs.FormParam("do_formula_enrichment")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doFormulaEnrichment;
        @jakarta.ws.rs.FormParam("do_picture_classification")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doPictureClassification;
        @jakarta.ws.rs.FormParam("do_picture_description")
        @org.jboss.resteasy.reactive.PartType(jakarta.ws.rs.core.MediaType.TEXT_PLAIN)
        public Boolean doPictureDescription;
    }

    /**
     * Process Url Async
     *
     * @param conversionRequest
     */
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Path("/v1alpha/convert/source/async")
    @jakarta.ws.rs.Consumes({ "application/json" })
    @jakarta.ws.rs.Produces({ "application/json" })
    TaskStatusResponse processUrlAsyncV1alphaConvertSourceAsyncPost(ConversionRequest conversionRequest);

    /**
     * Process Url
     *
     * @param conversionRequest
     */
    @jakarta.ws.rs.POST
    @jakarta.ws.rs.Path("/v1alpha/convert/source")
    @jakarta.ws.rs.Consumes({ "application/json" })
    @jakarta.ws.rs.Produces({ "application/json", "application/zip" })
    ConvertDocumentResponse processUrlV1alphaConvertSourcePost(ConversionRequest conversionRequest);

    /**
     * Task Result
     *
     * @param taskId
     */
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Path("/v1alpha/result/{task_id}")
    @jakarta.ws.rs.Produces({ "application/json", "application/zip" })
    ConvertDocumentResponse taskResultV1alphaResultTaskIdGet(@jakarta.ws.rs.PathParam("task_id") String taskId);

    /**
     * Task Status Poll
     *
     * @param taskId
     * @param wait
     */
    @jakarta.ws.rs.GET
    @jakarta.ws.rs.Path("/v1alpha/status/poll/{task_id}")
    @jakarta.ws.rs.Produces({ "application/json" })
    TaskStatusResponse taskStatusPollV1alphaStatusPollTaskIdGet(
            @jakarta.ws.rs.PathParam("task_id") String taskId,
            @jakarta.ws.rs.QueryParam("wait") BigDecimal wait);

}